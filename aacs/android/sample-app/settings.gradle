rootProject.name = "Alexa Auto App"

gradle.ext.deprecated_optional_module_parameters = [
        "APL",
        "UXRestrictions",
        "DeviceUsage",
        "Telephony",
        "Contacts",
        "CarControl"
] as Set<String>

gradle.ext.aacsRootDir = System.getenv("AACS_ROOT")
if (gradle.ext.aacsRootDir == null || gradle.ext.aacsRootDir.isEmpty()) {
    logger.info("AACS_ROOT environment variable not found, pre-populating variable with default path...")
    gradle.ext.aacsRootDir = file("..")
}
logger.info("aacsRootDir has been configured as: $gradle.ext.aacsRootDir")

gradle.ext.appComponentsRoot = System.getenv("AACS_APP_COMPONENTS")
if (gradle.ext.appComponentsRoot == null || gradle.ext.appComponentsRoot.isEmpty()) {
    logger.info("AACS_APP_COMPONENTS environment variable not found, pre-populating variable with default path...")
    gradle.ext.appComponentsRoot = file("../app-components")
}
logger.info("appComponentsRoot has been configured as: $gradle.ext.appComponentsRoot")

gradle.ext.aarDir = file("$gradle.ext.aacsRootDir/service/core-service/libs")

// AACS Components

def serviceDir = file("$gradle.ext.aacsRootDir/service")
def serviceModulesDir = file("$serviceDir/modules")
def aacsCommonDir = file("${gradle.ext.aacsRootDir}/common")

include(":aacs")
project(":aacs").projectDir = file("$serviceDir/core-service")
include(":aacs-extra")
project(":aacs-extra").projectDir = file("$serviceModulesDir/aacs-extra")
include(":aacs-maccandroid")
project(":aacs-maccandroid").projectDir = file("${serviceModulesDir}/maccandroid")
include(":aacsconstants")
project(":aacsconstants").projectDir = file("${aacsCommonDir}/constants/aacsconstants")
include(":aacs-annotation-api")
project(":aacs-annotation-api").projectDir = file("${aacsCommonDir}/annotations/aacs-annotation-api")
include(":aacs-annotation-processor")
project(":aacs-annotation-processor").projectDir = file("${aacsCommonDir}/annotations/aacs-annotation-processor")
include(":aacsipc")
project(":aacsipc").projectDir = file("${aacsCommonDir}/ipc/aacsipc")
include(":aacscommonutils")
project(":aacscommonutils").projectDir = file("${aacsCommonDir}/commonutils/aacscommonutils")

// Alexa Auto App - App Components

include(":alexa-auto-app")
project(":alexa-auto-app").projectDir = file("${rootProject.projectDir}/alexa-auto-app")
include(":alexa-auto-apis")
project(":alexa-auto-apis").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-apis")
include(":alexa-auto-lwa-auth")
project(":alexa-auto-lwa-auth").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-lwa-auth")
include(":alexa-auto-setup")
project(":alexa-auto-setup").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-setup")
include(":alexa-auto-media-player")
project(":alexa-auto-media-player").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-media-player")
include(":alexa-auto-apps-common-util")
project(":alexa-auto-apps-common-util").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-apps-common-util")
include(":alexa-auto-voice-interaction")
project(":alexa-auto-voice-interaction").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-voice-interaction")
include(":alexa-auto-apps-common-ui")
project(":alexa-auto-apps-common-ui").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-apps-common-ui")
include(":alexa-auto-navigation")
project(":alexa-auto-navigation").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-navigation")
include(":alexa-auto-settings")
project(":alexa-auto-settings").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-settings")
include(":alexa-auto-comms-ui")
project(":alexa-auto-comms-ui").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-comms-ui")
include(":alexa-auto-tts")
project(":alexa-auto-tts").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-tts/aacstts")
include(":alexa-auto-telephony")
project(":alexa-auto-telephony").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-telephony/aacstelephony")
include(":alexa-auto-contacts")
project(":alexa-auto-contacts").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-contacts/aacscontacts")
include(":alexa-auto-carcontrol")
project(":alexa-auto-carcontrol").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-carcontrol/aacscarcontrol")
include(":alexa-auto-ux-restrictions")
project(":alexa-auto-ux-restrictions").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-ux-restrictions")
include(":alexa-auto-templateruntime-renderer")
project(":alexa-auto-templateruntime-renderer").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-templateruntime-renderer")
include(":alexa-auto-device-usage")
project(":alexa-auto-device-usage").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-device-usage")
include(":alexa-auto-voice-ui")
project(":alexa-auto-voice-ui").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-voice-ui")
include ":alexa-auto-apl-renderer"
project(":alexa-auto-apl-renderer").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-apl-renderer")
include ":alexa-auto-apl-renderer:apl-render"
project(":alexa-auto-apl-renderer:apl-render").projectDir = file("${gradle.ext.appComponentsRoot}/alexa-auto-apl-renderer/modules/apl-render")

// leave preview mode as optional
gradle.ext.preview_mode_component = file("${gradle.ext.appComponentsRoot}/alexa-auto-preview-mode-util")
if (gradle.ext.preview_mode_component.exists()) {
    include ':alexa-auto-preview-mode-util'
    project(':alexa-auto-preview-mode-util').projectDir = gradle.ext.preview_mode_component
}

gradle.ext.extra_module_paths = []

if (getStartParameter().projectProperties.get("extensions") != null) {
    def extra_module_paths_unprocessed = getStartParameter().projectProperties.getOrDefault("extensions", "").split(",")
    extra_module_paths_unprocessed.each {
        if (it.contains("~")) {
            gradle.ext.extra_module_paths << it.replaceFirst("^~", System.getProperty("user.home"))
        } else {
            gradle.ext.extra_module_paths << it
        }
    }
} else {
    def extra_modules_folder = file("${rootProject.projectDir}/../../../extensions/extras")
    if (extra_modules_folder.exists()) {
        extra_modules_folder.eachDir {
            gradle.ext.extra_module_paths << file("${extra_modules_folder}/${it.name}")
        }
    }
}

gradle.ext.extra_module_names = []
gradle.ext.extra_module_factory_names = []
gradle.ext.extra_module_project_names = []
gradle.ext.extra_app_component_names = []
gradle.ext.extra_app_component_dependencies = []

for (extra_module_path in gradle.ext.extra_module_paths) {

    def extension_module_factory_folder = file("${extra_module_path}/aacs/android/modules")
    // Add dependencies on AACS module factories
    if (extension_module_factory_folder.exists()) {
        def extra_module_factory_name = ""
        def folder = file("${extension_module_factory_folder}")
        folder.eachDir {
            if (it.name.startsWith("aacs")) {
                extra_module_factory_name = it.name
            }
        }
        include ":" + extra_module_factory_name
        project(":" + extra_module_factory_name).projectDir = file("${extension_module_factory_folder}/${extra_module_factory_name}")
        gradle.ext.extra_module_factory_names << extra_module_factory_name
    }

    // Add dependencies on app components for extensions
    gradle.ext.extra_module_component = file("${extra_module_path}/samples/android-aacs-sample-app/modules")
    if (gradle.ext.extra_module_component.exists()) {
        def extra_module_project_name = ""
        def folder = file("${gradle.ext.extra_module_component}")
        folder.eachDir {
            if (it.name.startsWith("alexa-auto")) {
                extra_module_project_name = it.name
            }
        }
        include ":" + extra_module_project_name
        project(":" + extra_module_project_name).projectDir = file("${gradle.ext.extra_module_component}/${extra_module_project_name}")
        gradle.ext.extra_module_project_names << extra_module_project_name
    }

    // Add dependencies on app components under a different directory for extensions
    gradle.ext.extra_app_component = file("${extra_module_path}/aacs/android/app-components")
    if (gradle.ext.extra_app_component.exists()) {
        def extra_app_component_name = ""
        def folder = file("${gradle.ext.extra_app_component}")
        folder.eachDir {
            if (it.name.startsWith("alexa-auto")) {
                extra_app_component_name = it.name
                include ":" + extra_app_component_name
                def extra_app_component_dir = ""
                // Check if the extra app component has an inner module with the same name to be imported
                def inner_module_dir = file("${gradle.ext.extra_app_component}/${extra_app_component_name}/${extra_app_component_name}")
                if (inner_module_dir.exists()) {
                    extra_app_component_dir = inner_module_dir
                } else {
                    // If the extra app component directory does not contain an inner module, include the root project directly
                    extra_app_component_dir = file("${gradle.ext.extra_app_component}/${extra_app_component_name}")
                }
                project(":" + extra_app_component_name).projectDir = extra_app_component_dir

                gradle.ext.extra_app_component_names << extra_app_component_name

                // Include dependency libs (if any) needed by the extra app component
                def dependency_dir = file("${extra_app_component_dir}/libs")
                gradle.ext.extra_app_component_dependencies << dependency_dir
            }
        }
    }
}