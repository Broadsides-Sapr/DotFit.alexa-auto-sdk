gradle.ext.aacsRoot = new File(rootProject.projectDir, "..").getCanonicalPath()
gradle.ext.aarDir = new File(gradle.ext.aacsRoot, "service/core-service/libs").getCanonicalPath()

include ':aacs'
project(':aacs').projectDir = new File(gradle.ext.aacsRoot, '/service/core-service')
include ':aacs-maccandroid'
project(':aacs-maccandroid').projectDir = new File(gradle.ext.aacsRoot, '/service/modules/maccandroid')
include ':aacs-extra'
project(':aacs-extra').projectDir = new File(rootProject.projectDir, '/modules/aacs-extra')
include ':aacsconstants'
project(':aacsconstants').projectDir = new File(gradle.ext.aacsRoot, '/common/constants/aacsconstants')
include ':aacsipc'
project(':aacsipc').projectDir = new File(gradle.ext.aacsRoot, '/common/ipc/aacsipc')
include ':aacscommonutils'
project(':aacscommonutils').projectDir = new File(gradle.ext.aacsRoot, '/common/commonutils/aacscommonutils')
include ':aacs-annotation-api'
project(':aacs-annotation-api').projectDir = new File(gradle.ext.aacsRoot, '/common/annotations/aacs-annotation-api')
include ':aacs-annotation-processor'
project(':aacs-annotation-processor').projectDir = new File(gradle.ext.aacsRoot, '/common/annotations/aacs-annotation-processor')

// Extra modules for AACS
gradle.ext.extra_module_paths = []

if (getStartParameter().projectProperties.get("extensions") != null) {
    def extra_module_paths_unprocessed = getStartParameter().projectProperties.getOrDefault("extensions","").split(',')
    extra_module_paths_unprocessed.each{
        if (it.contains("~")) {
            gradle.ext.extra_module_paths << it.replaceFirst("^~", System.getProperty("user.home"))
        } else {
            gradle.ext.extra_module_paths << it
        }
    }
} else {
    def extra_modules_folder = new File(gradle.ext.aacsRoot,'../../extensions/extras')
    if (extra_modules_folder.exists()) {
        extra_modules_folder.eachDir {
            gradle.ext.extra_module_paths << new File(extra_modules_folder, it.name).getCanonicalPath()
        }
    }
}

gradle.ext.extra_module_names = []
gradle.ext.extra_module_factory_names = []
for (extra_module_path in gradle.ext.extra_module_paths) {
    // Get the list of extensions to be built
    def extension_module_folder = new File("${extra_module_path}/modules")
    if (extension_module_folder.exists()) {
        extension_module_folder.eachDir {
            gradle.ext.extra_module_names << it.name
        }
    }
    // Add dependencies on AACS module factories
    def extension_module_factory_folder = new File("${extra_module_path}/aacs/android/modules")
    if (extension_module_factory_folder.exists()) {
        def extra_module_factory_name = ''
        def folder = new File(extension_module_factory_folder.getAbsolutePath())
        folder.eachDir {
            if (it.name.startsWith('aacs')) {
                extra_module_factory_name = it.name
            }
        }
        include ':' + extra_module_factory_name
        project(':' + extra_module_factory_name).projectDir = new File(extension_module_factory_folder, extra_module_factory_name)
        gradle.ext.extra_module_factory_names << extra_module_factory_name
    }
}
