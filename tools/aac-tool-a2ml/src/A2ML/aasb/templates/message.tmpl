$header

#if $type.messageType == "publish"
//
// Message definition:
//    $type.symbol
//

struct $type.name {
    struct Header {
        struct MessageDescription {
            static const std::string topic() {
                return "$type.topic";
            }
            static const std::string action() {
                return "$type.action";
            }
        };
        static const std::string version() {
            return "$type.version";
        }
        static const std::string messageType() {
            return "Publish";
        }
        std::string id = ::aasb::utils::uuid::generateUUID();
        MessageDescription messageDescription;
    };
    struct Payload {
        #for $next in $type.payload:
        #if $next.optional
        $generator.get_type( $next ) $next.name = $generator.get_value( $next, $next.default );
        #elif $next.value
        const $generator.get_type( $next ) $next.name = $generator.get_value( $next, $next.value );
        #else
        $generator.get_type( $next ) $next.name;
        #end if
        #end for
    };
    static const std::string topic() {
        return "$type.topic";
    }
    static const std::string action() {
        return "$type.action";
    }
    static const std::string version() {
        return "$type.version";
    }
    static const std::string messageType() {
        return "Publish";
    }
    std::string toString() const;
    Header header;
    Payload payload;
};

// $type.name::Payload
inline void to_json(nlohmann::json &j, const $type.name::Payload &c) {
    j = nlohmann::json {
        #for $next in $type.payload:
        {"$next.name", c.$next.name},
        #end for
    };
}

inline void from_json(const nlohmann::json &j, $type.name::Payload &c) {
    #for $next in $type.payload:
    #if $next.value
    // CONST: j.at("$next.name").get_to(c.$next.name);
    #elif $next.optional
    if (j.contains("$next.name")) {
        j.at("$next.name").get_to(c.$next.name);
    }
    #else
    j.at("$next.name").get_to(c.$next.name);
    #end if
    #end for
}

// $type.name::Header::MessageDescription
inline void to_json(nlohmann::json &j, const $type.name::Header::MessageDescription &c) {
    j = nlohmann::json{
        {"topic", c.topic()},
        {"action", c.action()},
    };
}

inline void from_json(const nlohmann::json &j, $type.name::Header::MessageDescription &c) {
}

// $type.name::Header
inline void to_json(nlohmann::json &j, const $type.name::Header &c) {
    j = nlohmann::json{
        {"version", c.version()},
        {"messageType", c.messageType()},
        {"id", c.id},
        {"messageDescription", c.messageDescription},
    };
}

inline void from_json(const nlohmann::json &j, $type.name::Header &c) {
    j.at("id").get_to(c.id);
    j.at("messageDescription").get_to(c.messageDescription);
}

// $type.name
inline void to_json(nlohmann::json &j, const $type.name &c) {
    j = nlohmann::json{
        {"header", c.header},
        {"payload", c.payload},
    };
}

inline void from_json(const nlohmann::json &j, $type.name &c) {
    j.at("header").get_to(c.header);
    j.at("payload").get_to(c.payload);
}

// $type.name::toString()
inline std::string $type.name::toString() const{
    nlohmann::json j = *this;
    return j.dump(3);
}
#end if

#if $type.reply
//
// Message reply definition:
//    ${type.symbol}Reply
//

struct ${type.name}Reply {
    struct Header {
        struct MessageDescription {
            static const std::string topic() {
                return "$type.topic";
            }
            static const std::string action() {
                return "$type.action";
            }
            std::string replyToId;
        };
        static const std::string version() {
            return "$type.version";
        }
        static const std::string messageType() {
            return "Reply";
        }
        std::string id = aasb::utils::uuid::generateUUID();
        MessageDescription messageDescription;
    };
    struct Payload {
        #for $next in $type.reply:
        #if $next.default
        $generator.get_type( $next ) $next.name = $generator.get_value( $next, $next.default );
        #elif $next.value
        const $generator.get_type( $next ) $next.name = $generator.get_value( $next, $next.value );
        #else
        $generator.get_type( $next ) $next.name;
        #end if
        #end for
    };
    static const std::string topic() {
        return "$type.topic";
    }
    static const std::string action() {
        return "$type.action";
    }
    static const std::string version() {
        return "$type.version";
    }
    static const std::string messageType() {
        return "Reply";
    }
    Header header;
    Payload payload;
    std::string toString() const;
};

// ${type.name}Reply::Payload
inline void to_json(nlohmann::json &j, const ${type.name}Reply::Payload &c) {
    j = nlohmann::json {
        #for $next in $type.reply:
        {"$next.name", c.$next.name},
        #end for
    };
}

inline void from_json(const nlohmann::json &j, ${type.name}Reply::Payload &c) {
    #for $next in $type.reply:
    #if $next.value
    // CONST: j.at("$next.name").get_to(c.$next.name);
    #else
    j.at("$next.name").get_to(c.$next.name);
    #end if
    #end for
}

// ${type.name}Reply::Header::MessageDescription
inline void to_json(nlohmann::json &j, const ${type.name}Reply::Header::MessageDescription &c) {
    j = nlohmann::json{
        {"topic", c.topic()},
        {"action", c.action()},
        {"replyToId", c.replyToId},    
    };
}

inline void from_json(const nlohmann::json &j, ${type.name}Reply::Header::MessageDescription &c) {
    j.at("replyToId").get_to(c.replyToId);
}

// ${type.name}Reply::Header
inline void to_json(nlohmann::json &j, const ${type.name}Reply::Header &c) {
    j = nlohmann::json{
        {"version", c.version()},
        {"messageType", c.messageType()},
        {"id", c.id},
        {"messageDescription", c.messageDescription},
    };
}

inline void from_json(const nlohmann::json &j, ${type.name}Reply::Header &c) {
    j.at("id").get_to(c.id);
    j.at("messageDescription").get_to(c.messageDescription);
}

// ${type.name}Reply
inline void to_json(nlohmann::json &j, const ${type.name}Reply &c) {
    j = nlohmann::json{
        {"header", c.header},
        {"payload", c.payload},
    };
}

inline void from_json(const nlohmann::json &j, ${type.name}Reply &c) {
    j.at("header").get_to(c.header);
    j.at("payload").get_to(c.payload);
}

// ${type.name}Reply::toString()
inline std::string ${type.name}Reply::toString() const{
    nlohmann::json j = *this;
    return j.dump(3);
}
#end if

$footer
